<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Scan AI Tool - QR & Barcode Scanner</title>
  <style>
    body { font-family: system-ui, -apple-system, "Segoe UI", Roboto, Arial; margin: 20px; }
    .container { max-width: 820px; margin: 0 auto; }
    h1 { font-size: 1.6rem; margin-bottom: .25rem; }
    p { margin-top: 0; color: #444; }
    #reader { width: 100%; min-height: 320px; border-radius: 12px; overflow: hidden; background: #111; display:flex; align-items:center; justify-content:center; color:#fff; }
    .controls { margin-top: 10px; display:flex; gap:8px; flex-wrap:wrap; }
    button { padding: 8px 12px; border-radius:8px; border:1px solid #ccc; background:#f7f7f7; cursor:pointer; }
    button.negative { background:#ffecec; }
    #result { margin-top: 12px; padding:10px; border-radius:8px; background:#f1f5f9; word-wrap:break-word; }
    input[type=file] { display:none; }
    .small { font-size:.9rem; color:#666; }
    .flex { display:flex; gap:8px; align-items:center; }
  </style>
  <!-- html5-qrcode CDN -->
  <script src="https://unpkg.com/html5-qrcode@2.3.10/minified/html5-qrcode.min.js"></script>
</head>
<body>
  <div class="container">
    <h1>Scan AI Tool — QR & Barcode Scanner</h1>
    <p class="small">Use your camera to scan QR or barcode. Or upload an image. Works on desktop & mobile (HTTPS required for camera). Built with <code>html5-qrcode</code>.</p>

    <div id="reader">Camera preview will appear here</div>

    <div class="controls">
      <button id="start-camera">Start Camera</button>
      <button id="stop-camera" class="negative" disabled>Stop Camera</button>
      <label>
        <button id="upload-btn">Scan from Image</button>
        <input type="file" id="file-input" accept="image/*" />
      </label>
      <button id="copy-result" disabled>Copy Result</button>
      <button id="clear-result">Clear</button>
    </div>

    <div id="result" aria-live="polite">No result yet.</div>
  </div>

  <script>
    // Element refs
    const readerDiv = document.getElementById('reader');
    const startBtn = document.getElementById('start-camera');
    const stopBtn = document.getElementById('stop-camera');
    const fileInput = document.getElementById('file-input');
    const uploadBtn = document.getElementById('upload-btn');
    const resultDiv = document.getElementById('result');
    const copyBtn = document.getElementById('copy-result');
    const clearBtn = document.getElementById('clear-result');

    // Create Html5Qrcode scanner
    // Use a unique element id for the scanner.
    const html5QrCode = new Html5Qrcode(/* element id */ "reader", /* verbose= */ false);

    // Camera constraints / config
    const config = {
      fps: 10,
      qrbox: { width: 300, height: 300 }, // square scanning box (auto on small screens)
      // formatsToSupport: [Html5QrcodeSupportedFormats.QR_CODE, Html5QrcodeSupportedFormats.CODE_128],
    };

    let activeCameraId = null;
    let cameraRunning = false;

    async function startCamera() {
      try {
        // List cameras
        const devices = await Html5Qrcode.getCameras();
        if (!devices || devices.length === 0) {
          alert("No camera found on this device.");
          return;
        }

        // Prefer back camera if available (common mobile label contains 'back' or 'rear')
        const backCamera = devices.find(d => /back|rear|environment/i.test(d.label)) || devices[0];
        activeCameraId = backCamera.id;

        await html5QrCode.start(
          activeCameraId,
          config,
          qrCodeSuccessCallback,
          qrCodeErrorCallback
        );

        cameraRunning = true;
        startBtn.disabled = true;
        stopBtn.disabled = false;
        copyBtn.disabled = false;
      } catch (err) {
        console.error("Camera start failed:", err);
        alert("Could not start camera. Make sure you are on HTTPS and allowed camera permission.");
      }
    }

    async function stopCamera() {
      try {
        await html5QrCode.stop();
        cameraRunning = false;
        startBtn.disabled = false;
        stopBtn.disabled = true;
        readerDiv.innerHTML = "Camera preview will appear here";
      } catch (err) {
        console.error("Stop failed:", err);
      }
    }

    // Called when a QR or barcode is successfully decoded
    function qrCodeSuccessCallback(decodedText, decodedResult) {
      // decodedText - string of parsed content
      // decodedResult - object with more metadata (format, etc.)
      console.log("Decoded:", decodedText, decodedResult);
      resultDiv.textContent = `Result: ${decodedText} (format: ${decodedResult.result.format.formatName || 'unknown'})`;
      // If you want to automatically stop after first result, uncomment:
      // stopCamera();
    }

    function qrCodeErrorCallback(errorMessage) {
      // Called for every scan that doesn't find a code — we usually ignore
      // console.debug("QR scan error:", errorMessage);
    }

    // File upload scanning
    uploadBtn.addEventListener('click', () => fileInput.click());
    fileInput.addEventListener('change', async (e) => {
      const file = e.target.files && e.target.files[0];
      if (!file) return;
      try {
        const result = await Html5Qrcode.scanFileV2(file, /* showImage= */ true);
        // result is an object array in v2; handle both possibilities
        if (Array.isArray(result) && result.length > 0) {
          qrCodeSuccessCallback(result[0].decodedText, { result: { format: { formatName: result[0].format } }});
        } else if (result && result.decodedText) {
          qrCodeSuccessCallback(result.decodedText, { result: { format: { formatName: result.format } }});
        } else {
          resultDiv.textContent = "No QR/barcode found in the image.";
        }
      } catch (err) {
        console.error("Image scan failed:", err);
        resultDiv.textContent = "Failed to scan the image.";
      } finally {
        // clear input so same file can be selected again
        fileInput.value = "";
      }
    });

    // Copy to clipboard
    copyBtn.addEventListener('click', async () => {
      const txt = resultDiv.textContent || "";
      try {
        await navigator.clipboard.writeText(txt);
        copyBtn.textContent = "Copied!";
        setTimeout(() => copyBtn.textContent = "Copy Result", 1200);
      } catch (err) {
        alert("Clipboard copy failed. Here is the result:\n\n" + txt);
      }
    });

    clearBtn.addEventListener('click', () => {
      resultDiv.textContent = "No result yet.";
    });

    startBtn.addEventListener('click', () => startCamera());
    stopBtn.addEventListener('click', () => stopCamera());

    // Clean up on page unload
    window.addEventListener('beforeunload', async () => {
      if (cameraRunning) {
        try { await html5QrCode.stop(); } catch (e) {}
      }
    });
  </script>
</body>
</html>

 
